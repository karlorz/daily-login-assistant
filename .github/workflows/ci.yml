name: CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Cancel in-progress runs on the same branch when a new commit is pushed.
# This avoids wasting resources on outdated runs.
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: read # for checkout

jobs:
  build-and-test:
    name: Build and Test
    timeout-minutes: 45 # Increased for browser automation tests
    runs-on: ubuntu-latest
    permissions:
      contents: read # for checkout
      actions: write # for cache management

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          # semantic-release needs the full history to determine the version.
          fetch-depth: 0
          # Set safe directory for Git operations
          set-safe-directory: true

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          # Use the Node.js version specified in package.json
          node-version-file: 'package.json'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          # Use version from package.json engines field for consistency
          bun-version-file: 'package.json'
          # Configure registry for potential private packages
          registry-url: 'https://registry.npmjs.org'

      - name: Restore Bun dependencies cache
        uses: actions/cache/restore@v4
        id: bun-cache-restore
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-
            ${{ runner.os }}-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Save Bun dependencies cache
        if: steps.bun-cache-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}

      - name: Restore Playwright Browsers cache
        uses: actions/cache/restore@v4
        id: playwright-cache-restore
        with:
          path: |
            ~/.cache/ms-playwright
            ~/.cache/playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/bun.lockb') }}-${{ hashFiles('playwright.config.*') }}
          restore-keys: |
            ${{ runner.os }}-playwright-${{ hashFiles('**/bun.lockb') }}
            ${{ runner.os }}-playwright-
            ${{ runner.os }}-

      - name: Install Playwright Browsers
        run: bunx playwright install chromium --with-deps

      - name: Save Playwright Browsers cache
        if: steps.playwright-cache-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            ~/.cache/ms-playwright
            ~/.cache/playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/bun.lockb') }}-${{ hashFiles('playwright.config.*') }}

      - name: Run linting
        run: bun run lint

      - name: Run type checking
        run: bun run typecheck

      - name: Run tests
        run: bun run test:all
        env:
          # CI environment detection
          CI: true
          # Force headless mode in CI
          HEADLESS: true
          # Increase timeouts for CI environment
          CI_TIMEOUT_MULTIPLIER: 4
          # Enable GitHub reporter for better test failure annotations
          PLAYWRIGHT_TEST_REPORTER: 'github'
          # Additional CI optimizations
          PLAYWRIGHT_HEADLESS: true
          DEBUG: pw:api

      - name: Build project
        run: bun run build

      - name: Upload Playwright test results
        if: always() # Upload report even if previous steps fail
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ github.run_number }}
          path: |
            playwright-report/
            test-results/
          retention-days: 30

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: build-output-${{ github.run_number }}
          path: dist/
          retention-days: 7

  release:
    name: Release
    timeout-minutes: 15
    runs-on: ubuntu-latest
    needs: build-and-test
    # Only run on pushes to the main branch, not on PRs.
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance
      actions: write # for cache management

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          set-safe-directory: true

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version-file: 'package.json'
          # Set up .npmrc for publishing to npm
          registry-url: 'https://registry.npmjs.org'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version-file: 'package.json'
          registry-url: 'https://registry.npmjs.org'

      # The release job should be self-contained. It installs its own dependencies
      # to ensure the release environment is clean and reproducible.
      - name: Install dependencies
        run: bun install --frozen-lockfile

  
      # The build should also happen within the release job to ensure the artifact
      # being published is built in the same self-contained environment.
      - name: Build project
        run: bun run build

      - name: Verify build artifacts
        run: |
          if [ ! -d "dist" ]; then
            echo "Error: dist directory not found after build"
            exit 1
          fi
          if [ -z "$(ls -A dist)" ]; then
            echo "Error: dist directory is empty after build"
            exit 1
          fi
          echo "Build verification passed"
          ls -la dist/

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
          # Use NODE_AUTH_TOKEN for npm, which is configured by setup-node
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: bunx semantic-release

      - name: Upload release artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: release-output-${{ github.run_number }}
          path: |
            npm-debug.log*
            release-notes.md
          retention-days: 7